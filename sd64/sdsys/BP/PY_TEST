program py_test
* Copyright (c)2024 The SD Developers, All Rights Reserved
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 3, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software Foundation,
* Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
$include SDPYFUNC.H
crt 'embedded python test, hit <enter> to start':

input ok
crt str('=',50)
*
crt 'attempt init'
call !PY_INITIALIZE(rtn)
crt 'status = ':status()
crt str('=',50)
*
crt 'script text:'
lf = char(10)
 script  = 'FMRK   = chr(254)':lf
 script := 'VMRKM  = chr(253)':lf
 script := 'SVMRK  = chr(252)':lf
 script := 'result = ""':lf
 script := 'countdown = {"3" : "Three", "2" : "Two", "1" : "One", "0" : "Ignition!"}':lf
 script := 'for count in countdown:':lf
 script := '  result += count + " " + countdown[count] + FMRK ':lf
 script := "result = bytes(result, 'latin')":lf
 *
* show the script script
script_len = len(script)
for i = 1 to script_len
ch = script[i,1]
  if ch = lf then
    crt
  end else
    crt ch:
  end
next i
crt str('=',50)
*
crt 'attempt to run script:'
call !PY_RUNSTRING(script,rtn)
crt 'status = ':status()
if rtn <> 0 then goto 999
crt str('=',50)
*
crt 'attempt to access python object: result'
call !PY_GETATTR("result",rtn_string,error)
crt 'status = ':status()
crt "result:"
crt rtn_string
fldcnt = dcount(rtn_string,@FM)
for i = 1 to fldcnt
  crt rtn_string<i>
next i
*


crt str('=',50)
crt 'attempt to access python object: countdown'
call !PY_GETATTR("countdown",rtn_string,error)
crt 'status = ':status()
crt "countdown:"
crt rtn_string
*


crt str('=',50)
crt 'attempt to access nonexistent python object: dummy'
call !PY_GETATTR("dummy",rtn_string,error)
crt 'status = ':status()
crt "dummy:"
crt rtn_string
*

*
crt str('=',50)
crt 'attempt to create python dictionary my_dict'
rtn_status = PY_CREATEDICT("my_dict")
crt 'rtn_status = ':rtn_status
crt 'status()   = ':status()
*
crt str('=',50)
crt 'add key "k2" value "this is my second value" dictionary my_dict'
rtn_status = PY_DICTVALSETS("my_dict","k2","this is my second value")
crt 'rtn_status = ':rtn_status
crt 'status()   = ':status()
crt 'Now display contents via PY_RUNSTRING'
call !PY_RUNSTRING("print(my_dict)",rtn)
crt
*
crt str('=',50)
crt 'attempt get value for key "k1" dictionary my_dict'
rtn_string = PY_DICTVALGETS("my_dict","k1")
crt 'rtn_string = ':rtn_string
crt 'status()   = ':status()
*
crt str('=',50)
crt 'attempt to clear python dictionary my_dict'
rtn_status = PY_CLEARDICT("my_dict")
crt 'rtn_status = ':rtn_status
crt 'status()   = ':status()
crt 'Now display contents via PY_RUNSTRING'
call !PY_RUNSTRING("print(my_dict)",rtn)
crt
crt str('=',50)

*
* don't finalize, we will check when sd closes
999: crt 'complete'
end
